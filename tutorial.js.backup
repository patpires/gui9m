// ========================================
// SISTEMA DE TUTORIAL INTERATIVO
// ========================================

const tutorialSteps = [
    {
        id: 'welcome',
        title: 'Bem-vindo √† Aventura de GUI! üéâ',
        message: 'Ol√°! Eu sou o Papai CIRO e vou te ensinar a construir academias incr√≠veis! Vamos come√ßar?',
        target: null,
        action: null,
        nextButton: true
    },
    {
        id: 'resources',
        title: 'Recursos da Obra üì¶',
        message: 'Aqui voc√™ v√™ seus recursos: Tijolos üß±, Ferramentas üî®, Equipamentos üí™ e Dinheiro üí∞. Voc√™ vai precisar deles para construir!',
        target: '.resources-panel',
        action: null,
        nextButton: true
    },
    {
        id: 'work_button',
        title: 'Trabalhar na Obra üî®',
        message: 'Clique neste bot√£o para coletar recursos! Cada clique te d√° tijolos, ferramentas ou equipamentos. Vamos l√°, clique 30 vezes para ter recursos suficientes!',
        target: '#work-btn',
        action: 'click_work',
        requiredClicks: 30,
        highlight: true
    },
    {
        id: 'combo_system',
        title: 'Sistema de Combo üî•',
        message: '√ìtimo! Se voc√™ clicar rapidamente, ativa o COMBO e ganha MAIS recursos! Quanto mais r√°pido, maior o multiplicador!',
        target: '#work-btn',
        action: null,
        nextButton: true
    },
    {
        id: 'areas',
        title: '√Åreas para Construir üèóÔ∏è',
        message: 'Aqui est√£o as √°reas da academia que voc√™ pode construir. Cada uma precisa de recursos diferentes e te d√° dinheiro como recompensa!',
        target: '.right-panel',
        action: null,
        nextButton: true
    },
    {
        id: 'build_first',
        title: 'Primeira Constru√ß√£o üè¢',
        message: 'Agora voc√™ tem recursos suficientes! Vamos construir a RECEP√á√ÉO. Clique no bot√£o "Construir" da Recep√ß√£o!',
        target: '[data-area="reception"]',
        action: 'build_reception',
        highlight: true,
        waitForResources: true
    },
    {
        id: 'money_gained',
        title: 'Dinheiro Ganho! üí∞',
        message: 'Parab√©ns! Voc√™ construiu sua primeira √°rea e ganhou dinheiro! Use o dinheiro para comprar MELHORIAS que facilitam o jogo!',
        target: '#money',
        action: null,
        nextButton: true
    },
    {
        id: 'upgrades',
        title: 'Melhorias ‚ö°',
        message: 'Aqui voc√™ pode comprar melhorias com dinheiro. Elas aumentam sua coleta de recursos ou fazem coleta autom√°tica!',
        target: '.upgrades-panel',
        action: null,
        nextButton: true
    },
    {
        id: 'decisions',
        title: 'Decis√µes Estrat√©gicas üé≤',
        message: 'Durante o jogo, voc√™ ter√° que tomar DECIS√ïES importantes! Escolha bem, pois decis√µes erradas podem te fazer perder o jogo!',
        target: null,
        action: null,
        nextButton: true
    },
    {
        id: 'events',
        title: 'Mini-Eventos üéÅ',
        message: 'Fique atento! Eventos aleat√≥rios podem acontecer e te dar b√¥nus ou desafios. Eles aparecem de surpresa!',
        target: null,
        action: null,
        nextButton: true
    },
    {
        id: 'goal',
        title: 'Objetivo do Jogo üéØ',
        message: 'Seu objetivo √© construir TODAS as 4 √°reas da academia! Complete 3 academias para ZERAR o jogo e ganhar o Pr√™mio ConstruBusiness!',
        target: '.construction-area',
        action: null,
        nextButton: true
    },
    {
        id: 'warning',
        title: 'Aten√ß√£o! ‚ö†Ô∏è',
        message: 'CUIDADO: Se o dinheiro ZERAR (R$ 0), voc√™ perde o jogo! E se errar 2 decis√µes, tamb√©m √© Game Over! Gerencie bem seus recursos!',
        target: null,
        action: null,
        nextButton: true
    },
    {
        id: 'finish',
        title: 'Pronto para Come√ßar! üöÄ',
        message: 'Agora voc√™ sabe tudo! Boa sorte na constru√ß√£o das academias, GUI! Vamos fazer um trabalho incr√≠vel juntos! üí™',
        target: null,
        action: null,
        nextButton: true,
        isLast: true
    }
];

let tutorialState = {
    active: false,
    currentStep: 0,
    clickCount: 0,
    completed: false
};

// ========================================
// FUN√á√ïES DO TUTORIAL
// ========================================

function startTutorial() {
    // Verificar se j√° completou o tutorial
    const tutorialCompleted = localStorage.getItem('aventuraGUI_tutorialCompleted');
    if (tutorialCompleted === 'true') {
        return;
    }
    
    tutorialState.active = true;
    tutorialState.currentStep = 0;
    tutorialState.clickCount = 0;
    
    showTutorialStep(0);function showTutorialStep(stepIndex) {
    const step = tutorialSteps[stepIndex];
    
    // Se o passo requer construir recep√ß√£o, verificar a cada segundo
    if (step.action === 'build_reception') {
        const checkInterval = setInterval(() => {
            if (gameState.areasBuilt.includes('reception')) {
                clearInterval(checkInterval);
                setTimeout(() => nextTutorialStep(), 1000);
            }
        }, 500);
        
        // Guardar o intervalo para limpar depois
        tutorialState.checkInterval = checkInterval;
    }gth) {
        completeTutorial();
        return;
    }
    
    const step = tutorialSteps[stepIndex];
    tutorialState.currentStep = stepIndex;
    
    // Criar/atualizar overlay
    createTutorialOverlay(step);
    
    // Destacar elemento alvo
    if (step.target) {
        highlightElement(step.target);
    }
    
    // Mostrar seta apontando
    if (step.target && step.highlight) {
        showArrow(step.target);
    }
}

function createTutorialOverlay(step) {
    // Remover overlay anterior
    removeTutorialOverlay();
    
    // Criar overlay escuro
    const overlay = document.createElement('div');
    overlay.id = 'tutorial-overlay';
    overlay.className = 'tutorial-overlay';
    document.body.appendChild(overlay);
    
    // Criar caixa de di√°logo
    const dialog = document.createElement('div');
    dialog.id = 'tutorial-dialog';
    dialog.className = 'tutorial-dialog';
    
    const clickCounter = step.action === 'click_work' ? `<p class="tutorial-hint" id="tutorial-click-counter">Cliques: 0/${step.requiredClicks}</p>` : '';
    const actionHint = step.action && step.action !== 'click_work' ? '<p class="tutorial-hint">Complete a a√ß√£o para continuar!</p>' : '';
    
    dialog.innerHTML = `
        <div class="tutorial-header">
            <img src="ciro_character.png" alt="CIRO" class="tutorial-ciro">
            <div class="tutorial-progress">Passo ${tutorialState.currentStep + 1} de ${tutorialSteps.length}</div>
        </div>
        <h3 class="tutorial-title">${step.title}</h3>
        <p class="tutorial-message">${step.message}</p>
        <div class="tutorial-actions">
            ${step.nextButton ? '<button class="btn-primary tutorial-next" onclick="nextTutorialStep()">Pr√≥ximo ‚Üí</button>' : ''}
            ${clickCounter}
            ${actionHint}
        </div>
    `;
    
    document.body.appendChild(dialog);
    
    // Anima√ß√£o de entrada
    setTimeout(() => {
        dialog.classList.add('tutorial-show');
    }, 100);
}

function highlightElement(selector) {
    // Remover highlight anterior
    document.querySelectorAll('.tutorial-highlight').forEach(el => {
        el.classList.remove('tutorial-highlight');
    });
    
    // Adicionar highlight ao elemento
    const element = document.querySelector(selector);
    if (element) {
        element.classList.add('tutorial-highlight');
        element.style.position = 'relative';
        element.style.zIndex = '10001';
    }
}

function showArrow(selector) {
    // Remover seta anterior
    const oldArrow = document.getElementById('tutorial-arrow');
    if (oldArrow) {
        oldArrow.remove();
    }
    
    const element = document.querySelector(selector);
    if (!element) return;
    
    const rect = element.getBoundingClientRect();
    
    const arrow = document.createElement('div');
    arrow.id = 'tutorial-arrow';
    arrow.className = 'tutorial-arrow';
    arrow.innerHTML = 'üëá';
    
    // Posicionar seta acima do elemento
    arrow.style.position = 'fixed';
    arrow.style.left = (rect.left + rect.width / 2 - 20) + 'px';
    arrow.style.top = (rect.top - 60) + 'px';
    arrow.style.zIndex = '10002';
    
    document.body.appendChild(arrow);
}

function removeTutorialOverlay() {
    const overlay = document.getElementById('tutorial-overlay');
    if (overlay) overlay.remove();
    
    const dialog = document.getElementById('tutorial-dialog');
    if (dialog) dialog.remove();
    
    const arrow = document.getElementById('tutorial-arrow');
    if (arrow) arrow.remove();
    
    // Remover highlights
    document.querySelectorAll('.tutorial-highlight').forEach(el => {
        el.classList.remove('tutorial-highlight');
        el.style.zIndex = '';
    });
}

function nextTutorialStep() {
    const currentStep = tutorialSteps[tutorialState.currentStep];
    
    // Verificar se precisa esperar recursos
    if (currentStep.waitForResources) {
        const hasResources = gameState.bricks >= 20 && gameState.tools >= 10;
        if (!hasResources) {
            showTutorialHint('Voc√™ ainda n√£o tem recursos suficientes! Continue clicando em "Trabalhar na Obra".');
            return;
        }
    }
    
    showTutorialStep(tutorialState.currentStep + 1);
}

function showTutorialHint(message) {
    const hint = document.createElement('div');
    hint.className = 'tutorial-hint-popup';
    hint.textContent = message;
    document.body.appendChild(hint);
    
    setTimeout(() => {
        hint.remove();
    }, 3000);
}

function checkTutorialAction(action) {
    if (!tutorialState.active) return;
    
    const currentStep = tutorialSteps[tutorialState.currentStep];
    if (!currentStep.action) return;
    
    if (currentStep.action === 'click_work') {
        if (!tutorialState.clickCount) tutorialState.clickCount = 0;
        tutorialState.clickCount++;
        
        console.log('Tutorial click count:', tutorialState.clickCount);
        
        // Atualizar contador na tela
        const counter = document.getElementById('tutorial-click-counter');
        if (counter) {
            counter.textContent = `Cliques: ${tutorialState.clickCount}/${currentStep.requiredClicks}`;
            counter.style.color = tutorialState.clickCount >= currentStep.requiredClicks ? '#27ae60' : '#f39c12';
            counter.style.fontWeight = 'bold';
            counter.style.fontSize = '1.2rem';
        }
        
        if (tutorialState.clickCount >= currentStep.requiredClicks) {
            console.log('Avan√ßando tutorial...');
            tutorialState.clickCount = 0;
            setTimeout(() => nextTutorialStep(), 800);
        }
    }
    
    if (currentStep.action === 'build_reception' && action === 'build_reception') {
        setTimeout(() => nextTutorialStep(), 1000);
    }
}

function completeTutorial() {
    tutorialState.active = false;
    tutorialState.completed = true;
    
    removeTutorialOverlay();
    
    // Salvar que completou o tutorial
    localStorage.setItem('aventuraGUI_tutorialCompleted', 'true');
    
    // Mostrar mensagem de conclus√£o
    showCiroMessage('üéì Tutorial completo! Agora voc√™ est√° pronto para construir academias incr√≠veis! Boa sorte!');
}

function skipTutorial() {
    if (confirm('Tem certeza que deseja pular o tutorial?')) {
        completeTutorial();
    }
}

function resetTutorial() {
    localStorage.removeItem('aventuraGUI_tutorialCompleted');
    tutorialState.active = false;
    tutorialState.currentStep = 0;
    tutorialState.clickCount = 0;
    tutorialState.completed = false;
}

// ========================================
// INTEGRA√á√ÉO COM O JOGO
// ========================================

// Verificar a√ß√µes do tutorial
function checkTutorialWorkClick() {
    checkTutorialAction('click_work');
}

function checkTutorialBuild(areaId) {
    if (areaId === 'reception') {
        checkTutorialAction('build_reception');
    }
}

// Exportar fun√ß√µes
window.startTutorial = startTutorial;
window.nextTutorialStep = nextTutorialStep;
window.skipTutorial = skipTutorial;
window.resetTutorial = resetTutorial;
window.checkTutorialWorkClick = checkTutorialWorkClick;
window.checkTutorialBuild = checkTutorialBuild;
window.tutorialState = tutorialState;

